... Aula 03



# CONST.. 
quando uma tela é construida, o interpretador cria vários ponteiros de memoria para 
fazer a tela ficar dinamica, quando colocamos o CONST dizemos que estes nunca serão alterados.
isto melhora a performance do app.. 
   title: const Text("Pagina principal"),




# WIDGETS 

* Todo aplicativo Flutter é um widget.
* Composto de outra centenas de widgets. 

Portanto, entende-los é mais do que a nossa obrigação. 
Uma coisa bacana, é que na própria documentação do Flutter, 
eles deixam claro que a inspiração para os widgets vieram do React. 

Assim como no framework do Facebook, todo aplicativo é baseado em componentes,
 no Flutter é baseado em widgets.


--- Layout
    -- Single child 
        AspectRatio -->  é um widget que definimos o taamnho da altura e largura com uma proporção definida, ex. 16:9 tera o formato widscreen em paisagem 
        Center --> é Um bloco onde alinhamso os filhos no centro vertical e horizontal
        Padding --> é Um bloco onde determinamos margem interna e um filho. 
        Sizedbox -->  é Um bloco onde determinamos somente width e height,
        Container -->  é Um bloco simples, é o widget mais utilizado, agrupa um filho para determinar paramteros comuns
        Expanded --> 
        
 
        SingleChildScrollView --> Cria uma roASDASDASagem quando os elementos filhos ocupam uma tela maior que a disponivel
        Safearea --> Projeta a área da tela distanciando-a da barra de status que existe no top dos celulares e, caso existam, també distancia da camera no centro do app.
        Material --> Repassar aos widgets filhos o thema da aplicação e configurações visual de estilo


    --> Multi child
        Column --> Organiza os filhos na vertical
        Row --> Organiza os filhos na horizontal
        Scaffold  --> É a estrutura principal dos apps, barra de navegação superior, barra de navegação superior, pagina, botao flutuante
        Stack  --> Organiza os widgets filhos um emcima do outro, empilhados, como em uma mesa, o azul está emcima do vermelho
        ListView --> Cria um widget similar ao expanded porém quando não conhecemos a quantidade de itens, e organiza os filhos como lista... faz uma for na lista e gera os widgets.. util em API



-- Loading
        CircularProgressIndicator -> Um loading redondo fazendo uma animação
        LinearProgressIndicatior -> Uma Linha animada demonstrando que está acontecendo um processo



-> State e Cilclo de vida


1. initState: Chamado apenas 1 única vez, na criação no widget. Quando o widget é inserido na widget tree.

2. build: Chamado em diferentes situações. Sempre que o widget precisar ser reconstruído ou após o initState() ou após a função setState() e até mesmo quando o widget for removido da widget tree para ser inserido em outro ponto (isto ficará mais claro quando construirmos nosso primeiro app).

3. setState: Responsável por notificar nosso widget que o estado interno foi alterado. Por exemplo, ao concluir uma requisição HTTP, queremos exibir estas informações na tela. Para isso, preenchemos nossa tela com as informações recebidas e invocamos a função setState().

4. didUpdateWidget: Sempre que o seu widget sofrer alterações, este método é chamado e executado antes do build(). Ou seja, sempre que chamar o setState(), este método é executado. Pode ser útil ao lidar com animações e/ou quando precisar ter acesso ao estado antigo do widget.

5. dispose: Chamado quando o widget for removido da widget tree permanentemente.




